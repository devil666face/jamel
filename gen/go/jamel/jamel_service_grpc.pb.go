// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: jamel/jamel_service.proto

package jamel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JamelService_NewTaskFromFile_FullMethodName  = "/jamel.JamelService/NewTaskFromFile"
	JamelService_NewTaskFromImage_FullMethodName = "/jamel.JamelService/NewTaskFromImage"
)

// JamelServiceClient is the client API for JamelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JamelServiceClient interface {
	NewTaskFromFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TaskRequest, TaskResponse], error)
	NewTaskFromImage(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
}

type jamelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJamelServiceClient(cc grpc.ClientConnInterface) JamelServiceClient {
	return &jamelServiceClient{cc}
}

func (c *jamelServiceClient) NewTaskFromFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TaskRequest, TaskResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JamelService_ServiceDesc.Streams[0], JamelService_NewTaskFromFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskRequest, TaskResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JamelService_NewTaskFromFileClient = grpc.ClientStreamingClient[TaskRequest, TaskResponse]

func (c *jamelServiceClient) NewTaskFromImage(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, JamelService_NewTaskFromImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JamelServiceServer is the server API for JamelService service.
// All implementations must embed UnimplementedJamelServiceServer
// for forward compatibility.
type JamelServiceServer interface {
	NewTaskFromFile(grpc.ClientStreamingServer[TaskRequest, TaskResponse]) error
	NewTaskFromImage(context.Context, *TaskRequest) (*TaskResponse, error)
	mustEmbedUnimplementedJamelServiceServer()
}

// UnimplementedJamelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJamelServiceServer struct{}

func (UnimplementedJamelServiceServer) NewTaskFromFile(grpc.ClientStreamingServer[TaskRequest, TaskResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NewTaskFromFile not implemented")
}
func (UnimplementedJamelServiceServer) NewTaskFromImage(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTaskFromImage not implemented")
}
func (UnimplementedJamelServiceServer) mustEmbedUnimplementedJamelServiceServer() {}
func (UnimplementedJamelServiceServer) testEmbeddedByValue()                      {}

// UnsafeJamelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JamelServiceServer will
// result in compilation errors.
type UnsafeJamelServiceServer interface {
	mustEmbedUnimplementedJamelServiceServer()
}

func RegisterJamelServiceServer(s grpc.ServiceRegistrar, srv JamelServiceServer) {
	// If the following call pancis, it indicates UnimplementedJamelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JamelService_ServiceDesc, srv)
}

func _JamelService_NewTaskFromFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JamelServiceServer).NewTaskFromFile(&grpc.GenericServerStream[TaskRequest, TaskResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JamelService_NewTaskFromFileServer = grpc.ClientStreamingServer[TaskRequest, TaskResponse]

func _JamelService_NewTaskFromImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JamelServiceServer).NewTaskFromImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JamelService_NewTaskFromImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JamelServiceServer).NewTaskFromImage(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JamelService_ServiceDesc is the grpc.ServiceDesc for JamelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JamelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jamel.JamelService",
	HandlerType: (*JamelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTaskFromImage",
			Handler:    _JamelService_NewTaskFromImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewTaskFromFile",
			Handler:       _JamelService_NewTaskFromFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "jamel/jamel_service.proto",
}
